Configurações de aplicações distribuidas com etcd
Tags: go, concorrencia, cloud config

Wilson Júnior
Software enthusiast, Globo.com
wilsonpjunior@gmail.com
https://about.me/wpjunior
@wpjunior

* Wilson Júnior
: Sempre demonstrar grato pelo convite
: Agradecer a presença de todos

- *Pythonista* desde moleque (=
- Também é *Gopher*
- Goiano root's
- Apaixonado por tecnologia e como ela se apoia nas pessoas
- Biker
- Desenvolvedor na Globo.com há 3 anos

* Características de uma configuração

- Descreve o comportamento
- Infrequentemente alterada
- Aplicações modificam seu comportamento

* Imaginemos que possuimos uma aplicação escalada horizontalmente 100 vezes em diferentes lugares
* E cada dessas instâncias recebem uma carga de transações muito alta

* Como lidaríamos com a consulta e escrita de configurações ?

* Not the better approach: variáveis de ambiente
.image env-variables.png

* Good to handle
- Variáveis de ambientes são rápidas e não requerem nenhum I/O externo em tempo de consulta

* Bad to handle
- Cordenar 100 restarts para quando houver mudanças
- A aplicação deve fazer *gracefull* *restart* não sacrificando nenhuma transação em andamento

* Not better approach: consultar no banco de dados
.image database-query.png

* Good to handle
- os dados sempre estarão frescos pois foram consultados no momento
- não preocupar com um componente para manter

* Bad to handle
- criamos um gargalo.
- too many: 304 not modified content.

* Not the better approach: consultar no banco de dados + sistema de cache
.image database-cache.png

* Good to handle
- o cache garantirá velocidade no acesso.

* Bad to handle
- Inconsistência temporal
- se a aplicação é crítica...

* Better approach: escolha um banco de dados especializado em configurações
.image database-config.png

* O que é o etcd

- Criado pela core os
- Utilizado como storage do kubernetes
- Key/value store
- Persistente
- Cluster tolerante a falhas

* O que é o etcd
- Consistência via algoritmo Raft
- MVCC Multiversion concurrency control
- 15K stars on github
- Utilizado em outras empresas

* Protocolo debaixo dos panos

- GRPC + HTTP (v3 da API)
- RESTful + JSON + HTTP (v2 da API)

* Raft

* Raft

- Um algoritmo de *Consensus*
- Conceito de *Log replicado*
- Similar ao paxos
- https://raft.github.io/
- Necessidade de manter os dados consistentes e tolerante a falhas

* Tamanho do cluster
.html cluster-size.html

* Replicated log

* Exemplo

.image replicated-log.png

* Transações lineares

* Tradeoff: propagar x consultar

* Somos treinados/viciados em pensar no fluxo só de consultar dados.

* Quando propagar é melhor

* Quando propagar é melhor

- os dados não são frequentemente alterados
- os dados não possuem um grande volume

* Exemplos

- Configurações de rede
- Feature flags
- Flags de negócio

* Quando consultar é melhor

* Quando consultar é melhor

- os dados são frequentemente alterados
- os dados possuem um grande volume

* Exemplos

- Conteúdo estruturado
- Dados de usuários


* Lets code

* Conectando no cluster
.code simple-get.go /clientv3.New/,/defer/ HLxxx

* Simple GET

.code simple-get.go /cli.Get/,/^}/ HLxxx

* Simple PUT

.code simple-put.go /cli.Put/,/^}/ HLxxx

* Simple GET with prefix

.code simple-get-prefix.go /cli.Get/,/^}/ HLGet

* Simple Watch

.code simple-watch.go /cli.Watch/,/^}/ HLxxx

* Simple Watch + Prefix

.code simple-watch-prefix.go /cli.Watch/,/^}/ HLxxx

* Simple GET + Watch

.code simple-get-watch.go /cli.Get/,/Initial value/ HLxxx

* Simple GET + Watch
.code simple-get-watch.go /cli.Watch/,/^}/ HLxxx

* Simple App

.code simple-app.go /var/,/^}/ HLxxx

* Simple App
.code simple-app.go /func loadConfig/,/defer/ HLxxx

* Simple App
.code simple-app.go /key/,/Store/ HLxxx

* Simple App
.code simple-app.go /cli.Watch/,/^}/ HLxxx

* Simple App

- Let's run and test

* Código fonte disponível

- github.com/wpjunior/etcd-slides

* Outros projetos semelhantes

- Consul
- Serf
- Zookeeper

* Estamos contratando

- talentos.globo.com
